AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Provision an end-to-end AWS CodePipeline backed CI/CD stack that builds and deploys
  a Lambda function listing AWS Payment Cryptography keys using CodeBuild and CodeDeploy.

Parameters:
  EnvironmentName:
    Type: String
    Default: payment-crypto
    Description: Short identifier used for tagging and resource names.
  GitHubRepository:
    Type: String
    Description: GitHub repository in the form owner/repo that stores the Lambda source.
  GitHubConnectionArn:
    Type: String
    Description: ARN of the existing CodeStar Connections connection authorized for the GitHub repository.
  RepositoryBranch:
    Type: String
    Default: main
    Description: Default branch that the pipeline tracks.
  PipelineName:
    Type: String
    Default: payment-crypto-pipeline
    Description: Name assigned to the CodePipeline instance.
  CodeBuildProjectName:
    Type: String
    Default: payment-crypto-build
    Description: Logical name for the CodeBuild project.
  CodeDeployApplicationName:
    Type: String
    Default: payment-crypto-app
    Description: Name for the CodeDeploy application that targets the Lambda function.
  CodeDeployDeploymentGroupName:
    Type: String
    Default: payment-crypto-dg
    Description: Deployment group name for CodeDeploy.
  LambdaFunctionName:
    Type: String
    Default: payment-crypto-key-lister
    Description: Name of the Lambda function that lists AWS Payment Cryptography keys.

Resources:
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowHTTPSOnly
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub '${ArtifactBucket.Arn}'
              - !Sub '${ArtifactBucket.Arn}/*'
            Condition:
              Bool:
                aws:SecureTransport: false

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-${LambdaFunctionName}-exec'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PaymentCryptographyKeyRead
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - payment-cryptography:ListKeys
                  - payment-cryptography:ListKeyTags
                  - payment-cryptography:ListAliases
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  PaymentCryptoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Description: Lists AWS Payment Cryptography keys and returns their metadata.
      Code:
        ZipFile: |
          import json
          import logging
          import boto3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          client = boto3.client("payment-cryptography")


          def lambda_handler(event, context):
              """
              Placeholder implementation deployed with CloudFormation.
              The pipeline will overwrite this code after the first successful run.
              """
              response = client.list_keys()
              keys = response.get("Keys", [])
              logger.info("Found %d keys in Payment Cryptography service.", len(keys))
              return {
                  "statusCode": 200,
                  "body": json.dumps({"keyCount": len(keys)}),
              }
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  PaymentCryptoVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref PaymentCryptoFunction

  PaymentCryptoAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref PaymentCryptoFunction
      FunctionVersion: !GetAtt PaymentCryptoVersion.Version
      Name: live
      Description: Live alias updated by CodeDeploy deployments.

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-${CodeBuildProjectName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: CodeBuildInlinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Sub '${ArtifactBucket.Arn}'
                  - !Sub '${ArtifactBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref GitHubConnectionArn
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildProjectName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: LAMBDA_FUNCTION_NAME
            Value: !Ref LambdaFunctionName
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      TimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-${CodeDeployApplicationName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref CodeDeployApplicationName
      ComputePlatform: Lambda

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Ref CodeDeployDeploymentGroupName
      DeploymentConfigName: CodeDeployDefault.LambdaAllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      AlarmConfiguration:
        Enabled: false
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-${PipelineName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineInlinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref GitHubConnectionArn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetDeploymentGroup
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt CodeBuildServiceRole.Arn
                  - !GetAtt CodeDeployServiceRole.Arn
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - codebuild.amazonaws.com
                      - codedeploy.amazonaws.com
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketLocation
                Resource:
                  - !Sub '${ArtifactBucket.Arn}'
                  - !Sub '${ArtifactBucket.Arn}/*'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Ref GitHubRepository
                BranchName: !Ref RepositoryBranch
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
      RestartExecutionOnUpdate: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

Outputs:
  PipelineConsoleUrl:
    Description: Console URL to monitor the CodePipeline execution.
    Value: !Sub 'https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${PipelineName}/view'
  LambdaFunctionArn:
    Description: ARN of the Payment Cryptography Lambda function.
    Value: !GetAtt PaymentCryptoFunction.Arn
